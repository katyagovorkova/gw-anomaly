[1mdiff --git a/scripts/fetch_timeslide_data.py b/scripts/fetch_timeslide_data.py[m
[1mindex 8e3ebf6..0a274ba 100644[m
[1m--- a/scripts/fetch_timeslide_data.py[m
[1m+++ b/scripts/fetch_timeslide_data.py[m
[36m@@ -35,10 +35,10 @@[m [mdef whiten_bandpass_resample_clean([m
     strainH1 = TimeSeries.get(f'H1:{CHANNEL}', start_point, end_point) #.get, verbose,,, .find[m
 [m
     # Whiten, bandpass, and resample[m
[31m-    strainL1 = strainL1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-    strainL1 = strainL1.resample(sample_rate)[m
[31m-    strainH1 = strainH1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-    strainH1 = strainH1.resample(sample_rate)[m
[32m+[m[32m    strainL1 = strainL1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m    strainL1 = strainL1.whiten()[m
[32m+[m[32m    strainH1 = strainH1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m    strainH1 = strainH1.whiten()[m
 [m
     data = np.stack([strainH1, strainL1])[m
 [m
[1mdiff --git a/scripts/helper_functions.py b/scripts/helper_functions.py[m
[1mindex 1f5ebe8..559880c 100644[m
[1m--- a/scripts/helper_functions.py[m
[1m+++ b/scripts/helper_functions.py[m
[36m@@ -435,11 +435,11 @@[m [mdef whiten_bandpass_bkgs([m
                 # On attempting to bandpass with Nyquist frequency, an[m
                 # error is thrown. This was only the BANDPASS_LOW is used[m
                 # with a highpass filter[m
[31m-                white_seg = TimeSeries(bkg_seg, sample_rate=sample_rate).whiten([m
[31m-                    asd=ASDs[ifo]).highpass(BANDPASS_LOW)[m
[32m+[m[32m                white_seg = TimeSeries(bkg_seg, sample_rate=sample_rate).highpass(BANDPASS_LOW).whiten([m
[32m+[m[32m                    asd=ASDs[ifo])[m
             else:[m
[31m-                white_seg = TimeSeries(bkg_seg, sample_rate=sample_rate).whiten([m
[31m-                    asd=ASDs[ifo]).bandpass(BANDPASS_LOW, BANDPASS_HIGH)[m
[32m+[m[32m                white_seg = TimeSeries(bkg_seg, sample_rate=sample_rate).bandpass([m
[32m+[m[32m                    BANDPASS_LOW, BANDPASS_HIGH).whiten(asd=ASDs[ifo])[m
             white_segs[j] = clipping([m
                 white_seg, sample_rate, clip_edge=clip_edge)[m
         all_white_segs.append(white_segs)[m
[1mdiff --git a/scripts/run_on_BurstBenchmark.py b/scripts/run_on_BurstBenchmark.py[m
[1mindex 7095453..60922da 100644[m
[1m--- a/scripts/run_on_BurstBenchmark.py[m
[1m+++ b/scripts/run_on_BurstBenchmark.py[m
[36m@@ -66,11 +66,11 @@[m [mdef whiten_bandpass_resample([m
         strainL1[:shift_datapoints] = temp[m
     [m
     # Whiten, bandpass, and resample[m
[31m-    strainL1 = strainL1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-    strainL1 = strainL1.resample(sample_rate)[m
[32m+[m[32m    strainL1 = strainL1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m    strainL1 = strainL1.whiten()[m
 [m
[31m-    strainH1 = strainH1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-    strainH1 = strainH1.resample(sample_rate)[m
[32m+[m[32m    strainH1 = strainH1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m    strainH1 = strainH1.whiten()[m
 [m
     return [strainH1, strainL1], start_point[m
 [m
[1mdiff --git a/scripts/run_on_O3a.py b/scripts/run_on_O3a.py[m
[1mindex b7373ff..a2d87f9 100644[m
[1m--- a/scripts/run_on_O3a.py[m
[1m+++ b/scripts/run_on_O3a.py[m
[36m@@ -265,11 +265,11 @@[m [mdef whiten_bandpass_resample([m
     #     strainL1[:shift_datapoints] = temp[m
 [m
         # Whiten, bandpass, and resample[m
[31m-        strainL1 = strainL1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-        strainL1 = strainL1.resample(sample_rate)[m
[32m+[m[32m        strainL1 = strainL1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m        strainL1 = strainL1.whiten()[m
 [m
[31m-        strainH1 = strainH1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-        strainH1 = strainH1.resample(sample_rate)[m
[32m+[m[32m        strainH1 = strainH1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m        strainH1 = strainH1.whiten()[m
 [m
         return [strainH1, strainL1][m
     except:[m
[1mdiff --git a/scripts/run_on_O3b.py b/scripts/run_on_O3b.py[m
[1mindex c61baab..c530f43 100644[m
[1m--- a/scripts/run_on_O3b.py[m
[1m+++ b/scripts/run_on_O3b.py[m
[36m@@ -233,11 +233,11 @@[m [mdef whiten_bandpass_resample([m
         t0 = int(strainL1.t0 / u.s)[m
 [m
         # Whiten, bandpass, and resample[m
[31m-        strainL1 = strainL1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-        strainL1 = strainL1.resample(sample_rate)[m
[32m+[m[32m        strainL1 = strainL1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m        strainL1 = strainL1.whiten()[m
 [m
[31m-        strainH1 = strainH1.whiten().bandpass(bandpass_low, bandpass_high)[m
[31m-        strainH1 = strainH1.resample(sample_rate)[m
[32m+[m[32m        strainH1 = strainH1.resample(sample_rate).bandpass(bandpass_low, bandpass_high)[m
[32m+[m[32m        strainH1 = strainH1.whiten()[m
 [m
         return [strainH1, strainL1][m
     except:[m
