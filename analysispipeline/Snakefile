rule plot_cut_efficiency:
    params:
        generated_data_file = expand('/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
                             dataclass='{signal_dataclass}'),
        evaluated_data_file = expand(rules.evaluate_signals.output,
                             signal_dataclass='{signal_dataclass}'),
    output:
        save_file = directory('output/cut_effic/{signal_dataclass}/')
    shell:
        'python3 scripts/plot_cut_efficiency.py \
                    {params.evaluated_data_file} {output.save_file} \
                    {params.generated_data_file}'

rule plot_results:
    input:
        fm_model_path = rules.train_final_metric.output.fm_model_path
    params:
        evaluation_dir = f'output/',
        save_path = directory(f'output/paper/')
    shell:
        'mkdir -p {params.save_path}; '
        'python3 scripts/plotting.py {params.evaluation_dir} {params.save_path} \
            {input.fm_model_path}'

rule supervised_bbh:
    input:
        bbh = expand('/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
            dataclass='bbh'),
        timeslides = expand('/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
            dataclass='timeslides'),
    params:
        models = 'output/supervised-bbh/model.pt',
        plots = 'output/supervised-bbh/'
    shell:
        'python3 scripts/supervised.py {input.bbh} {input.timeslides} \
            {params.models} {params.plots}'

rule make_pipeline_plot:
    shell:
        'snakemake plot_results --dag | dot -Tpdf > dag.pdf'