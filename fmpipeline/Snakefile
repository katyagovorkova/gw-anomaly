from config import TIMESLIDE_TOTAL_DURATION, TIMESLIDES_START, TIMESLIDES_STOP

signalclasses = ['bbh', 'sglf', 'sghf']
backgroundclasses = ['background', 'glitches']
modelclasses = signalclasses + backgroundclasses
fm_training_classes = [
    'bbh_fm_optimization',
    'sghf_fm_optimization',
    'sglf_fm_optimization',
    'supernova_fm_optimization',
    'wnbhf_fm_optimization',
    'wnblf_fm_optimization'
    ]

rule generate_timeslides_for_far:
    input:
        model_path = expand(
            '/home/katya.govorkova/gwak-paper-final-models/trained/models/{dataclass}.pt',
            dataclass=modelclasses),
    params:
        data_path = f'output/{TIMESLIDES_START}_{TIMESLIDES_STOP}/',
    output:
        save_evals_path = directory(f'output/{TIMESLIDES_START}_{TIMESLIDES_STOP}_'+'timeslides_GPU{id}_duration{timeslide_total_duration}_files{files_to_eval}/'),
    # output:
        log = f'output/{TIMESLIDES_START}_{TIMESLIDES_STOP}/'+'GPU{id}_duration{timeslide_total_duration}_files{files_to_eval}.log'
    shell:
        'mkdir -p {output.save_evals_path}; '
        'python3 scripts/evaluate_timeslides.py {input.model_path} \
            --data-path {params.data_path} \
            --save-evals-path {output.save_evals_path} \
            --files-to-eval {wildcards.files_to_eval} \
            --timeslide-total-duration {wildcards.timeslide_total_duration} \
            --gpu {wildcards.id} \
            > {output.log}'

rule all_timeslides_for_far:
    input:
        expand(rules.generate_timeslides_for_far.output,
            id=range(4),
            files_to_eval=-1,
            timeslide_total_duration=32875) # 3.156e+8/800/4/3

rule generate_timeslides_for_fm:
    params:
        model_path = expand(
            '/home/katya.govorkova/gwak-paper-final-models/trained/models/{dataclass}.pt',
            dataclass=modelclasses),
        data_path = expand(
            '/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
            dataclass='timeslides'),
        shorten_timeslides = True,
        save_path = f'output/timeslides/',
    output:
        save_evals_path = f'output/timeslides/evals/',
        save_normalizations_path = f'output/timeslides/normalization/',
    shell:
        'mkdir -p {params.save_path}; '
        'mkdir -p {output.save_evals_path}; '
        'mkdir -p {output.save_normalizations_path}; '
        'python3 scripts/compute_far.py {params.save_path} {params.model_path} \
            --data-path {params.data_path} \
            --save-evals-path {output.save_evals_path} \
            --save-normalizations-path {output.save_normalizations_path} \
            --fm-shortened-timeslides {params.shorten_timeslides} '

rule train_final_metric:
    input:
        signals = expand(
            'output/evaluated/{signal_dataclass}_evals.npy',
            signal_dataclass=fm_training_classes),
        timeslides = f'output/timeslides/evals/',
        normfactors = f'output/timeslides/normalization/',
    output:
    # params:
        params_file = f'output/trained/final_metric_params.npy',
        norm_factor_file = f'output/trained/norm_factor_params.npy',
        fm_model_path = f'output/trained/fm_model.pt'
    shell:
        'python3 scripts/final_metric_optimization.py {output.params_file} \
            {output.fm_model_path} {output.norm_factor_file} \
            --timeslide-path {input.timeslides} \
            --signal-path {input.signals} \
            --norm-factor-path {input.normfactors}'

rule compute_far:
    input:
        metric_coefs_path = rules.train_final_metric.output.params_file,
        norm_factors_path = rules.train_final_metric.output.norm_factor_file,
        fm_model_path = rules.train_final_metric.output.fm_model_path,
        data_path = expand(rules.generate_timeslides_for_far.output.save_evals_path,
            id='{far_id}',
            timeslide_total_duration=TIMESLIDE_TOTAL_DURATION,
            files_to_eval=-1),
    params:
        model_path = expand(
            '/home/katya.govorkova/gwak-paper-final-models/trained/models/{dataclass}.pt',
            dataclass=modelclasses),
        shorten_timeslides = False,
    output:
        save_path = 'output/far_bins_{far_id}.npy'
    shell:
        'touch {output.save_path}; '
        'python3 scripts/compute_far.py {output.save_path} {params.model_path} \
            --data-path {input.data_path} \
            --fm-model-path {input.fm_model_path} \
            --metric-coefs-path {input.metric_coefs_path} \
            --norm-factor-path {input.norm_factors_path} \
            --fm-shortened-timeslides {params.shorten_timeslides} \
            --gpu {wildcards.far_id}'

rule merge_far_hist:
    input:
        inputs = expand(rules.compute_far.output.save_path,
            far_id=[0,1,2,3]),
    output:
        save_path = f'output/far_bins.npy'
    script:
        'scripts/merge_far_hist.py'
