signalclasses = ['bbh', 'sglf', 'sghf']
backgroundclasses = ['background', 'glitches']
modelclasses = signalclasses + backgroundclasses

rule train_quak:
    params:
        data = '/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
        model_file = 'output/trained/models/{dataclass}.pt',
        savedir = directory('output/trained/{dataclass}')
    shell:
        'mkdir -p {params.savedir}; '
        'python3 scripts/train_gwak.py {params.data} {params.model_file} {params.savedir} '

rule evaluate_signals:
    params:
        source_file = expand('/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
                            dataclass='{signal_dataclass}'),
        model_path = expand(rules.train_quak.params.model_file,
                            dataclass=modelclasses),
    output:
        save_file = 'output/evaluated/{signal_dataclass}_evals.npy',
    shell:
        'python3 scripts/evaluate_data.py {params.source_file} {output.save_file} {params.model_path}'

rule recreation_and_quak_plots:
    input:
        fm_model_path = rules.train_final_metric.output.fm_model_path
    params:
        models = expand(rules.train_quak.params.model_file,
                        dataclass=modelclasses),
        test_path = expand('/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
                           dataclass='bbh'),
        savedir = directory('output/paper/')
    shell:
        'mkdir -p {params.savedir}; '
        'python3 scripts/rec_and_gwak_plots.py {params.test_path} {params.models} \
            {input.fm_model_path} {params.savedir}'

rule quak_plotting_prediction_and_recreation:
    input:
        test_data = expand('/home/katya.govorkova/gwak-paper-final-models/data/{dataclass}.npz',
                           dataclass='{dataclass}')
    params:
        model_path = expand(rules.train_quak.params.model_file,
                            dataclass=modelclasses,
        reduce_loss = False,
        save_file = 'output/evaluated/quak_{dataclass}.npz'
    shell:
        'python3 scripts/gwak_predict.py {input.test_data} {params.save_file} {params.reduce_loss} \
            --model-path {params.model_path} '

rule all:
    input:
        expand(rules.evaluate_signals.output.save_file, signal_dataclass=signalclasses)